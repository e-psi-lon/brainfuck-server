{
  "scopeName": "source.pseudo",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#syscalls"
    },
    {
      "include": "#while-loops"
    },
    {
      "include": "#commands"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#data-types"
    },
    {
      "include": "#cell-references"
    },
    {
      "include": "#structures"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#equals"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.hash.pseudo",
          "match": "#.*$"
        }
      ]
    },
    "equals": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.equals.pseudo",
          "match": "="
        }
      ]
    },
    "while-loops": {
      "patterns": [
        {
          "name": "keyword.control.while.pseudo",
          "match": "\\b(while)\\b"
        },
        {
          "name": "keyword.control.endwhile.pseudo", 
          "match": "\\b(endwhile)\\b"
        }
      ]
    },
    "syscalls": {
      "patterns": [
        {
          "comment": "INIT statements",
          "match": "\\b(INIT)\\s+(SYS_[A-Z_]+)\\s+(C\\d+)\\s+(\\d+)",
          "captures": {
            "1": {"name": "keyword.other.init.pseudo"},
            "2": {"name": "entity.name.function.syscall.pseudo"},
            "3": {"name": "constant.numeric.pseudo"},
            "4": {"name": "constant.numeric.pseudo"}
          }
        },
        {
          "comment": "PARAM statements",
          "begin": "\\b(PARAM)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+\\(",
          "beginCaptures": {
            "1": { "name": "keyword.other.param.pseudo" },
            "2": { "name": "variable.parameter.pseudo" }
          },
          "end": "\\)\\s*:\\s*(INT|PTR|STRUCT)(?:\\[(\\d+)\\])?(\\s*=)?",
          "endCaptures": {
            "1": { "name": "entity.name.type.pseudo" },
            "2": { "name": "constant.numeric.pseudo" },
            "3": { "name": "keyword.operator.assignment.pseudo" }
          },
          "patterns": [
            {"include": "#cell-references"},
            {"match": ",", "name": "punctuation.separator.parameter.pseudo"}
          ]
        },
        {
          "comment": "Syscall invocations",
          "match": "\\b(SYS_[A-Z_]+)(?:\\s*\\(([^)]*)\\))?",
          "captures": {
            "1": {"name": "entity.name.function.syscall.pseudo"},
            "2": {"name": "meta.function-call.pseudo"}
          }
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "name": "keyword.other.command.pseudo",
          "match": "\\b(MOV|SET)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "Variable declarations with cell assignments",
          "match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s+\\(([^)]+)\\)(?:\\s*=\\s*(.*))?",
          "captures": {
            "1": {"name": "variable.other.declaration.pseudo"},
            "2": {"name": "variable.other.cell.pseudo"},
            "3": {"name": "constant.other.pseudo"}
          }
        },
        {
          "comment": "Variable references (but not SYS_ prefixed)",
          "name": "variable.other.pseudo",
          "match": "\\b(?!SYS_)[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "data-types": {
      "patterns": [
        {
          "match": "\\b(INT|PTR|STRUCT)(?:\\[(\\d+)\\])?\\b",
          "captures": {
            "1": {"name": "entity.name.type.pseudo"},
            "2": {"name": "constant.numeric.pseudo"}
          }
        }
      ]
    },
    "cell-references": {
      "patterns": [
        {
          "match": "\\b(C\\d+)(\\.\\.)?(C\\d+)?\\b",
          "captures": {
            "1": {"name": "constant.numeric.cell.pseudo"},
            "2": {"name": "keyword.operator.range.pseudo"},
            "3": {"name": "constant.numeric.cell.pseudo"}
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.pseudo",
          "match": "\\b0x[0-9A-Fa-f]+\\b"
        },
        {
          "name": "constant.numeric.pseudo",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.pseudo",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.pseudo",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.pseudo",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.pseudo",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "structures": {
      "patterns": [
        {
          "name": "punctuation.definition.structure.begin.pseudo",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.structure.end.pseudo",
          "match": "\\}"
        },
        {
          "name": "punctuation.definition.array.begin.pseudo",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.array.end.pseudo",
          "match": "\\]"
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?:\\[(\\d+)\\])?\\s*:",
          "captures": {
            "1": {"name": "entity.name.tag.field.pseudo"},
            "2": {"name": "constant.numeric.pseudo"}
          }
        },
        {
          "name": "punctuation.separator.comma.pseudo",
          "match": ","
        },
        {
          "name": "punctuation.definition.colon.pseudo",
          "match": ":"
        }
      ]
    }
  }
}